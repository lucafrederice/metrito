import { prisma } from "../../../../prisma/client"
import { motion } from "framer-motion"
import Head from "next/head"
import { PaperClipIcon, XMarkIcon } from "@heroicons/react/20/solid"
import { useRouter } from "next/router"

export const getStaticPaths = async () => {
    const transactions = await prisma.transaction.findMany({
        select: {
            id: true
        }
    })
    return {
        paths: [...transactions.map(transaction => {
            return {
                params: {
                    transaction: transaction.id
                }
            }
        })],
        fallback: "blocking"
    }
}

export const getStaticProps = async (context: any) => {
    const { transaction: id } = context.params

    const trans = await prisma.transaction.findUnique({
        where: {
            id: id
        },
        include: {
            product: true,
        }
    })

    const transaction = {
        ...trans,
        approved_date: trans?.approved_date ? trans?.approved_date?.toLocaleDateString() : "",
        order_date: trans?.order_date ? trans?.order_date?.toLocaleDateString() : "",
        warranty_expire_date: trans?.warranty_expire_date ? trans?.warranty_expire_date?.toLocaleDateString() : "",
        price: trans?.currency === "USD" ? Number(trans?.price?.toFixed(2)) * 5 : Number(trans?.price?.toFixed(2)),
        hotmart_fee_total: Number(trans?.hotmart_fee_total?.toFixed(2)),
        hotmart_fee_fixed: Number(trans?.hotmart_fee_fixed?.toFixed(2)),
        hotmart_fee_base: Number(trans?.hotmart_fee_base?.toFixed(2))
    }

    return {
        props: {
            transaction
        },
    }
}

export default function Transaction(props: any) {
    const { transaction: trans } = props

    let transaction = { ...trans }

    transaction.hotmart_fee_total = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: transaction?.currency || "BRL" }).format(Number(transaction?.hotmart_fee_total?.toFixed(2)))

    transaction.hotmart_fee_base = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: transaction?.currency || "BRL" }).format(Number(transaction?.hotmart_fee_base?.toFixed(2)))

    transaction.hotmart_fee_fixed = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: transaction?.currency || "BRL" }).format(Number(transaction?.hotmart_fee_fixed?.toFixed(2)))

    transaction.price = new Intl.NumberFormat('pt-BR', { style: 'currency', currency: transaction?.currency || "BRL" }).format(Number(transaction?.price?.toFixed(2)))


    let details: any = []
    for (const key in transaction) {
        if (key === "product") {
            for (const prodKey in transaction.product) {
                if (prodKey !== "id")
                    details.push({
                        key: "product_" + prodKey,
                        value: transaction.product[prodKey]
                    })
            }

        }

        if (key !== "product") {
            if (key === "is_subscription")
                details.push({
                    key: key,
                    value: transaction[key] ? "yes" : "no"
                })

            if (key !== "is_subscription")
                details.push({
                    key: key,
                    value: transaction[key]
                })
        }

    }


    const router = useRouter()
    return (
        <motion.div layoutId={transaction.id} className={"fixed inset-0 bg-white overflow-y-scroll"}>
            <Head>
                <title>{transaction.id}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="p-5 pt-10 grid place-items-center relative"
                style={{
                    paddingBottom: "calc(env(safe-area-inset-bottom) + 1.5rem)",
                }}
            >

                <div className="absolute top-0 right-0 pt-16 pr-4">
                    <button
                        type="button"
                        className="bg-white rounded-md text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                        onClick={() => router.back()}
                    >
                        <span className="sr-only">Close</span>
                        <XMarkIcon className="h-6 w-6" aria-hidden="true" />
                    </button>
                </div>
                <div className="border-gray-200">
                    <div>
                        <h3 className="text-lg leading-6 font-medium text-gray-900">Transaction Details</h3>
                        <p className="mt-1 text-sm max-w-xs sm:max-w-full text-gray-500">Info about purchase, price, customer, commissions, and more.</p>
                    </div>
                    <dl className="sm:divide-y sm:divide-gray-200">
                        {
                            details.map(
                                (obj: any) => (
                                    <div key={obj.value} className="py-4 sm:py-5 sm:px-8 sm:grid sm:grid-cols-2 sm:gap-4">
                                        <dt className="text-sm font-medium text-gray-500">{obj.key}</dt>
                                        <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:text-right">{obj.value}</dd>
                                    </div>
                                )
                            )
                        }
                    </dl>
                </div>
            </div>
        </motion.div>
    )
}